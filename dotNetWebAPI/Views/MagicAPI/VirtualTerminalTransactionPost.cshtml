@model dotNetWebAPI.Models.VirtualTerminalTransactionPostModels.VT_TRANSACTION
@using dotNetWebAPI.Models;
@using dotNetWebAPI.Helpers;
@{
    ViewBag.Title = "Virtual Terminal Transaction";
}
<div class="loader"></div>
<div class="container">
    <h2>Magic Virtual Terminal Transaction (POST)</h2>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Virtual Terminal TransactionModels POST Using JSON </h4>
            <hr />
            <div class="well">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.CLIENTKEY, htmlAttributes: new { @class = "control-label col-md-2" })
                    <i class="fa fa-question-circle right" title="" data-placement="right" data-toggle="tooltip" href="#" data-original-title="Client api key (unique identifier) i.e. '8E3F2...' usually 32 characters in length" aria-hidden="true"></i>

                    <div class="col-md-4">
                        @Html.EditorFor(model => model.CLIENTKEY, new { htmlAttributes = new { @class = "form-control", @Value = "8E3F20CE5619431D9BE737FD80E3E990" } })
                        @Html.ValidationMessageFor(model => model.CLIENTKEY, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.TRANSACTIONIDENTIFIER, htmlAttributes: new { @class = "control-label col-md-2" })
                    <i class="fa fa-question-circle right" title="" data-placement="right" data-toggle="tooltip" href="#" data-original-title="1 to 32 character alpha-numeric string generated by client. Client should provide their own Transaction ID's at time of deployment. Make note of the ID, it is used for transaction information retrival with Virtual Terminal Get." aria-hidden="true"></i>
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.TRANSACTIONIDENTIFIER, new { htmlAttributes = new { @class = "form-control", @Value = Guid.NewGuid().ToString().Replace("-", "") } })
                        @Html.ValidationMessageFor(model => model.TRANSACTIONIDENTIFIER, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.LINEITEM[0].identifiers, htmlAttributes: new { @class = "control-label col-md-2" })
                    <i class="fa fa-question-circle right" title="" data-placement="right" data-toggle="tooltip" href="#" data-original-title="Client payment type name i.e. 'Business Tax' or whatever client provided as a value. Used for the purpose of a join between the CSI portal and the client's MIS and/or CIS systems" aria-hidden="true"></i>
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.LINEITEM.CUSTOMERPAYMENTTYPEID, new { htmlAttributes = new { @class = "form-control", @Value = "Business Tax" } })
                        @Html.ValidationMessageFor(model => model.LINEITEM.CUSTOMERPAYMENTTYPEID, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label class="col-md-2">Generate Random Data</label>
                <div class="col-md-4">
                    <input type="button" class="btn btn-primary btnGenerate" id="rndGenerate" value="Random Transaction" />
                </div>
            </div>
            <div class="well">
                <div class="form-group">
                    @Html.LabelFor(model => model.AMOUNT, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        <div class="input-group">
                            <div class="input-group-addon">$</div>
                            @Html.EditorFor(model => model.AMOUNT, new { htmlAttributes = new { @class = "form-control", @id = "amount" } })
                            @Html.ValidationMessageFor(model => model.AMOUNT, "", new { @class = "text-danger" })
                            <div class="input-group-addon">.00</div>
                        </div>
                    </div>
                </div>
                <hr />
                <div class=" form-group">
                    @Html.LabelFor(model => model.LINEITEM.PAYMENTID, htmlAttributes: new { @class = "control-label col-md-2" })
                    <i class="fa fa-question-circle right" title="" data-placement="right" data-toggle="tooltip" href="#" data-original-title="Alpha-numeric string <=100 generated by client. Note, in this example we are randomly generating an ID." aria-hidden="true"></i>
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.LINEITEM.PAYMENTID, new { htmlAttributes = new { @class = "form-control", @Value = Guid.NewGuid().ToString().Replace("-", "").Substring(0, 9), @id = "paymentID" } })
                        @Html.ValidationMessageFor(model => model.LINEITEM.PAYMENTID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.LINEITEM.PAYMENTID_SECONDARY, htmlAttributes: new { @class = "control-label col-md-2" })
                    <i class="fa fa-question-circle right" title="" data-placement="right" data-toggle="tooltip" href="#" data-original-title="Alpha-numeric string <=100 generated by client. Note, in this example we are randomly generating an ID." aria-hidden="true"></i>
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.LINEITEM.PAYMENTID_SECONDARY, new { htmlAttributes = new { @class = "form-control", @Value = Guid.NewGuid().ToString().Replace("-", "").Substring(0, 9), @id = "paymentIDSecondary" } })
                        @Html.ValidationMessageFor(model => model.LINEITEM.PAYMENTID_SECONDARY, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.LINEITEM.ITEMAMOUNT, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        <div class="input-group">
                            <div class="input-group-addon">$</div>
                            @Html.EditorFor(model => model.LINEITEM.ITEMAMOUNT, new { htmlAttributes = new { @class = "form-control", @id = "lineItemAmount" } })
                            @Html.ValidationMessageFor(model => model.LINEITEM.ITEMAMOUNT, "", new { @class = "text-danger" })
                            <div class="input-group-addon">.00</div>
                        </div>
                    </div>
                </div>
                <hr />
                <div class="form-group">
                    @Html.LabelFor(model => model.NAME, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.NAME, new { htmlAttributes = new { @class = "form-control", @Value = "1" } })
                        @Html.ValidationMessageFor(model => model.NAME, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ADDRESS, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.ADDRESS, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ADDRESS, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.CITY, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.CITY, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CITY, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.STATE, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.DropDownListFor(model => model.STATE, StateExtension.GetStatesList(), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.STATE, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ZIP, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.ZIP, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ZIP, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.COUNTRY, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.DropDownListFor(model => model.COUNTRY, StateExtension.GetCountriesList(), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.COUNTRY, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.EMAIL, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.EMAIL, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EMAIL, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PHONE, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.PHONE, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PHONE, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.NOTES, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.TextAreaFor(model => model.NOTES, new { @class = "form-control", @rows = 3 })
                        @Html.ValidationMessageFor(model => model.NOTES, "", new { @class = "text-danger" })
                    </div>
                </div>
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-8">
                        <input type="submit" value="Submit" class="btn btn-lg btn-primary btnSubmit" />
                    </div>
                </div>
            </div>
        </div>

    }
</div>
@Html.Partial("_VirtualTerminalTransactionPostResponsePartial", TempData["VTPostResponse"])
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

